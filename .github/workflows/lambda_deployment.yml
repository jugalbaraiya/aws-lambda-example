name: CI/CD Pipeline to deploy Springboot Application to Lambda Function

on:
  #Manually trigger workflow runs
  workflow_dispatch:
  #Trigger the workflow on push from the main branch
  push:
    branches: [ master ]

jobs:
  #Test's job
#  tests:
#    name: Unit tests
#    #Run on Ubuntu using the latest version
#    runs-on: ubuntu-latest
#    #Job's steps
#    steps:
#      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
#      - uses: actions/checkout@v1
#      #Set up JDK 11
#      - name: Set up JDK
#        uses: actions/setup-java@v1
#        with:
#          java-version: '11'
#      #Set up Maven cache
#      - name: Cache Maven packages
#        #This action allows caching dependencies and build outputs to improve workflow execution time.
#        uses: actions/cache@v1
#        with:
#          path: ~/.m2
#          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#          restore-keys: ${{ runner.os }}-m2
#      #Run Tests
#      - name: Run Tests
#        run: mvn -B test

  #Sonar's Job
#  sonar:
#    #Depends on test's job
#    needs: tests
#    name: SonarCloud analysis
#    #Run on Ubuntu using the latest version
#    runs-on: ubuntu-latest
#    #Job's steps
#    steps:
#      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
#      - uses: actions/checkout@v1
#      #Set up JDK 11
#      - name: Set up JDK
#        uses: actions/setup-java@v1
#        with:
#          java-version: '11'
#      #Set up SonarCloud cache
#      - name: Cache SonarCloud packages
#        #This action allows caching dependencies and build outputs to improve workflow execution time.
#        uses: actions/cache@v1
#        with:
#          path: ~/.sonar/cache
#          key: ${{ runner.os }}-sonar
#          restore-keys: ${{ runner.os }}-sonar
#      #Set up Maven cache
#      - name: Cache Maven packages
#        #This action allows caching dependencies and build outputs to improve workflow execution time.
#        uses: actions/cache@v1
#        with:
#          path: ~/.m2
#          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#          restore-keys: ${{ runner.os }}-m2
#      #Analyze project with SonarCloud
#      - name: Analyze with SonarCloud
#        run: mvn -B verify sonar:sonar -Dsonar.projectKey=sofieneBK_Hands-on-ci-cd-for-springboot-apps -Dsonar.organization=sofienebk -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  #Build's job
  build:
    #Depends on sonar's job
#    needs: sonar
    name: Build & Deploy
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v2
      #Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '21'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Build the application using Maven
      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml
      #Install AWS CLI v2
      - name: AWS CLI v2
        uses: imehedi/actions-awscli-v2@latest
        with:
          args: "lambda update-function-code \
            --function-name arn:aws:lambda:ap-south-1:160885260142:function:aws-lambda-example \
            --zip-file fileb:///home/runner/work/aws-lambda-example/aws-lambda-example/target/aws-lambda-example-1.0-SNAPSHOT-lambda-package.zip"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: "ap-south-1"




  #Deploy's job
#  deploy:
#    #Depends on build's job
#    needs: build
#    name: Deploy
#    #Run on Ubuntu using the latest version
#    runs-on: ubuntu-latest
#    steps:
#      - name: Download JAR
#        #Download the artifact which was uploaded in the build's job
#        uses: actions/download-artifact@v2
#        with:
#          name: artifact
#      #Deploy the artifact (JAR) into AWS Beanstalk
#      - name: Deploy to EB
#        uses: einaregilsson/beanstalk-deploy@v13
#        with:
#          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws_session_token: ${{ secrets.AWS_SESSION_TOKEN }}
#          use_existing_version_if_available: false
#          application_name: spring-boot-deploy
#          environment_name: Springbootdeploy-env
#          version_label: ${{github.SHA}}
#          region: us-east-1
#          deployment_package: data-0.0.1-SNAPSHOT.jar

#  deploy:
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v2
#      - name: Install zip tool
#        uses: montudor/action-zip@v1
#      - name: Create Zip file for Lambda function
#        run: zip -r code.zip .
#      - name: AWS CLI v2
#        uses: imehedi/actions-awscli-v2@latest
#        with:
#          args: "lambda update-function-code \
#            --function-name arn:aws:lambda:ap-south-1:160885260142:function:aws-lambda-example \
#            --zip-file fileb://code.zip"
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_DEFAULT_REGION: "ap-south-1"